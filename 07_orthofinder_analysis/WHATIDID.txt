mkdir data

cd data/

## Download reference proteomes from ensembl:
mkdir 2020-04-11_ensembl_datasets
cd 2020-04-11_ensembl_datasets/

## Human:
mkdir homo_sapiens
cd homo_sapiens/
wget ftp://ftp.ensembl.org/pub/release-99/fasta/homo_sapiens/pep/Homo_sapiens.GRCh38.pep.all.fa.gz
cd ../

## Mouse:
mkdir mus_musculus
cd mus_musculus/
wget ftp://ftp.ensembl.org/pub/release-99/fasta/mus_musculus/pep/Mus_musculus.GRCm38.pep.all.fa.gz
zcat Mus_musculus.GRCm38.pep.all.fa.gz | head
cd ../s

## Zebrafish:
mkdir danio_rerio
cd danio_rerio/
wget ftp://ftp.ensembl.org/pub/release-99/fasta/danio_rerio/pep/Danio_rerio.GRCz11.pep.all.fa.gz
cd ../

## Atlantic Salmon:
mkdir salmo_salar
cd salmo_salar/s
wget ftp://ftp.ensembl.org/pub/release-99/fasta/salmo_salar/pep/Salmo_salar.ICSASG_v2.pep.all.fa.gz
cd ../

## Northern Pike:
mkdir esox_lucius
cd esox_lucius/
wget ftp://ftp.ensembl.org/pub/release-99/fasta/esox_lucius/pep/Esox_lucius.Eluc_V3.pep.all.fa.gz
cd ../

## Brown trout:
mkdir salmo_trutta
cd salmo_trutta/
wget ftp://ftp.ensembl.org/pub/release-99/fasta/salmo_trutta/pep/Salmo_trutta.fSalTru1.1.pep.all.fa.gz
cd ../

## Three-spined stickleback:
mkdir gastrosteus_aculeatus
cd gastrosteus_aculeatus/
wget ftp://ftp.ensembl.org/pub/release-99/fasta/gasterosteus_aculeatus/pep/Gasterosteus_aculeatus.BROADS1.pep.all.fa.gzs
cd ../

## Japanese Medaka:
mkdir oryzias_latipes
cd oryzias_latipes
wget ftp://ftp.ensembl.org/pub/release-99/fasta/oryzias_latipes_hni/pep/Oryzias_latipes_hni.ASM223471v1.pep.all.fa.gz
cd ../

## Cod:
mkdir gadus_morhua
cd gadus_morhua/
wget ftp://ftp.ensembl.org/pub/release-99/fasta/gadus_morhua/pep/Gadus_morhua.gadMor1.pep.all.fa.gz
cd ../

## Atlantic herring:
mkdir clupea_harengus
cd clupea_harengus/
wget ftp://ftp.ensembl.org/pub/release-99/fasta/clupea_harengus/pep/Clupea_harengus.Ch_v2.0.2.pep.all.fa.gz
cd ../

## Guppy:
mkdir poecilia_reticulata
cd poecilia_reticulata/
wget ftp://ftp.ensembl.org/pub/release-99/fasta/poecilia_reticulata/pep/Poecilia_reticulata.Guppy_female_1.0_MT.pep.all.fa.gz
cd ../../

## Download the rainbow trout from RefSeq:
mkdir 2020-04-11_refseq_datasets
cd 2020-04-11_refseq_datasets/

## Rainbow trout:
mkdir onchorhynchus_mykiss
cd onchorhynchus_mykiss/
wget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/002/163/495/GCF_002163495.1_Omyk_1.0/GCF_002163495.1_Omyk_1.0_protein.faa.gz
cd ../../

mkdir onchorhynchus_kisutch
cd onchorhynchus_kisutch/
wget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/002/021/735/GCF_002021735.2_Okis_V2/GCF_002021735.2_Okis_V2_protein.faa.gz
wget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/002/021/735/GCF_002021735.2_Okis_V2/GCF_002021735.2_Okis_V2_translated_cds.faa.gz
cd ../

mkdir onchorhynchus_nerka
cd onchorhynchus_nerka/
wget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/006/149/115/GCF_006149115.1_Oner_1.0/GCF_006149115.1_Oner_1.0_protein.faa.gz
wget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/006/149/115/GCF_006149115.1_Oner_1.0/GCF_006149115.1_Oner_1.0_translated_cds.faa.gz
cd ../

mkdir onchorhynchus_tshawytscha
cd onchorhynchus_tshawytscha/s
wget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/002/872/995/GCF_002872995.1_Otsh_v1.0/GCF_002872995.1_Otsh_v1.0_protein.faa.gz
wget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/002/872/995/GCF_002872995.1_Otsh_v1.0/GCF_002872995.1_Otsh_v1.0_translated_cds.faa.gzs
cd ../

mkdir salvelinus_alpinuss
cd salvelinus_alpinus/
wget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/002/910/315/GCF_002910315.2_ASM291031v2/GCF_002910315.2_ASM291031v2_protein.faa.gz
wget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/002/910/315/GCF_002910315.2_ASM291031v2/GCF_002910315.2_ASM291031v2_translated_cds.faa.gz
cd ../../

## For RefSeq protein sequences, a custom way is required to extract longest protein isoform as 
## the orthofinder script only works on ensembl annotated protein sequence FASTA files
## First download protein fasta and translated CDS fasta which contains information on transcripts:
## Then abbreviate the FASTA header infromation so only contains essential protein and gene information:
zcat GCF_002163495.1_Omyk_1.0_translated_cds.faa.gz | cut -d '[' -f 1-3 | sed 's/ /_/g' > GCF_002163495.1_Omyk_1.0_translated_cds_edited.fa 

## Extract gene information and create a unique list of gene ids:
grep '>' GCF_002163495.1_Omyk_1.0_translated_cds_edited.fa | \
cut -d '[' -f 3 | sed 's/db_xref=GeneID://g' | sed 's/]_//g' | sort | uniq > unique_gene_list.txt

## Match lines containing gene name, sort by descending length and extract the longest isoform per gene:
while read line;
do
echo "$line";
grep -w "$line" length_per_translated_cds.txt | \
sort -k2,2nr | head -n 1 | cut -f 1  >> longest_transcript_per_gene.txt;
done < unique_gene_list.txt

## Extract FASTA headers of corresponding protein IDs in the RefSeq protein sequence FASTA
## The protein sequences and translated cds should be the same but want to ensure:
zgrep -f longest_transcript_per_gene_protein_ids.txt GCF_002163495.1_Omyk_1.0_protein.faa.gz | \
sed 's/>//g' > GCF_002163495.1_Omyk_1.0_longest_protein_ids.txt

## The last step is to subset longest protein isoform per gene:
seqtk GCF_002163495.1_Omyk_1.0_protein.faa.gz GCF_002163495.1_Omyk_1.0_longest_protein_ids.txt -l 80 \
> GCF_002163495.1_Omyk_1.0_protein_primary_transcripts.fa

## For running the code:
## For ensembl:
## Link individual protein fasta files to input directory:
## Uncompress and then run:
for name in *.fa; do python ~/src/OrthoFinder/tools/primary_transcript.py "$name"; done

## Running this code results in the generation of a folder that contains individual proteins files for each species.
## Files were then renamed with abbreviated species names, which would be used on orthogroup and species graphs - the name change
## is recommended by the authors of OrthoFinder.

## For running OrthoFinder:
orthofinder -t 30 -f input/primary_transcripts/
